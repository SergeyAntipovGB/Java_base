package seminar_tasks.seminar6;

import java.util.*;

public class Sem6 {
    public static void main(String[] args) {
        
        // task0();
        taskCat();
        
    }

    static void task0(){
        /*<aside>
üìî 1. –°–æ–∑–¥–∞–π—Ç–µ HashSet, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {1, 2, 3, 2, 4, 5, 6, 3}. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

2. –°–æ–∑–¥–∞–π—Ç–µ LinkedHashSet, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {1, 2, 3, 2, 4, 5, 6, 3}.  –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

3. –°–æ–∑–¥–∞–π—Ç–µ TreeSet, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {1, 2, 3, 2, 4, 5, 6, 3}.  –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

</aside>*/

        Integer[] arr = new Integer[]{1, 2, 3, 11, 2, 9, 4, 5, 6};
        Set<Integer> set1 = new HashSet<>(Arrays.asList(arr));
        Set<Integer> set2 = new LinkedHashSet<>(Arrays.asList(arr));
        Set<Integer> set3 = new TreeSet<>(Arrays.asList(arr));

        System.out.println(set1);
        System.out.println(set2);
        System.out.println(set3);
    }

    static void taskCat(){
        // 1. –°–æ–∑–¥–∞–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ Cat - HashSet<Cat>. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤.

        // 2. –°–æ–∑–¥–∞–π—Ç–µ 2 –∏–ª–∏ –±–æ–ª–µ–µ –∫–æ—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ –ø–æ–ª—è—Ö. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏—Ö –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.

        // 3. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥
        // **public boolean**
        // equals(Object o)
        // –ü—Ä–æ–ø–∏—à–∏—Ç–µ –≤ –Ω—ë–º –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Ö—Ä–∞–Ω–∏–º—ã–º –≤ –ø–æ–ª—è—Ö. –¢–æ –µ—Å—Ç—å, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–≤–Ω—ã.

        // 4. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥
        // **public int hashCode()**
        // –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å hash, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–µ–π –∫–ª–∞—Å—Å–∞ Cat. (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Objects.hash(...))

        // 5. –í—ã–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑ –ø—É–Ω–∫—Ç–∞ 2, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–∏–ª–∏—Å—å.
        Cat cat1 = new Cat("–ú—É—Ä–∫–∞","–í–∞—Å–∏–ª–∏–π","–º–µ–π–∫—É–Ω",8);
        Cat cat2 = new Cat("–ë–∞—Ä—Å–∏–∫","–ò–≤–∞–Ω","–ø–µ—Ä—Å–∏–¥—Å–∫–∞—è",10);
        Cat cat3 = new Cat("–ë–∞—Ä—Å–∏–∫","–ò–≤–∞–Ω","–ø–µ—Ä—Å–∏–¥—Å–∫–∞—è",10);

        Set<Cat> set = new HashSet<>();
        set.add(cat1);
        set.add(cat2);
        set.add(cat3);
        System.out.println(cat2.equals(cat3));
        System.out.println(set);


        // System.out.println(cat1.getName());
        // System.out.println(cat2.getAge());
        // System.out.println(cat1);
        // System.out.println(cat2.toString());
        // System.out.println(cat3.toString());


    }

    // static void task_2(){
    //     // –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω–∏—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 
    //     // —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 0 –¥–æ 24.
        
    //     // 2. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≤—ã—à–µ
    //     //  –º–∞—Å—Å–∏–≤ –∏ —Å –ø–æ–º–æ—â—å—é Set –≤—ã—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 
    //     //  –≤ –¥–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π 
    //     // –∑–∞–ø—è—Ç–æ–π.
        
    //     // –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—É:
        
    //     // –ø—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª * 100 / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.
    //     System.out.println(unicPercent(createrArr(100, 0, 24)));
    //     }
    //     static Integer[] createrArr(int size, int min, int max){
    //         Integer[] array = new Integer[size];
    //         for (int i = 0; i < array.length; i++) {
    //             array[i] = (int)(Math.random()*(max-min+1)+min);
    //         }
    //         return array;
    //     }
    //     static double unicPercent(Integer[] array){
    //         Set<Integer> set = new HashSet<>(Arrays.asList(array));
    //         double percent = set.size() * 100.0/array.length;
    //         return percent;
    //     }
    // }    

}