package seminar4;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args){

        // task0();
        // task1();
        // task2();
        // task3();
        stack();

    }

    static void task0(){
        // 1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        // 2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.
        List<Integer> list = new ArrayList<>();
        Queue<Integer> linked = new LinkedList<>();

        long start = System.currentTimeMillis();
        for (int i = 0; i < 900000; i++) {
            list.add(i);
        }
        long end = System.currentTimeMillis();

        for (int i = 0; i < 900000; i++) {
            linked.add(i);    
        }
        long secondend = System.currentTimeMillis();
        System.out.println(end - start);
        System.out.println(secondend - end);
    }

    static void task1(){
    // üìî –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
    // 1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞
    // text~num
    // 1. –ù—É–∂–Ω–æ —Ä–∞—Å—Å–ø–ª–∏—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ ~, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å text –≤ —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é num.
    // 2. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print~num, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ num –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞.
        List<String> linked = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean work = true;
        while (work){
            System.out.println("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É! ");
            String line = scanner.nextLine();
            String[] arr = line.split("~");
            int num = Integer.parseInt(arr[1]);
            String text = arr[0];
            switch (text){
                case "print" :
                    System.out.println(linked.remove(num));
                    break;
                case "exit" :
                    System.out.println("–î–æ –≤—Å—Ç—Ä–µ—á–∏!");
                    work = false;
                    break;
                default:
                    linked.add(num, text);

            }
        }
    }

    static void task2(){
        // üìî –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        // 1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ‚Äú–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç‚Äù —Å—Ç—Ä–æ–∫–∏.
        // 2. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–≤–µ–¥–µ–Ω–Ω–∞—è –±—ã–ª–∞ –ø–µ—Ä–≤–æ–π –≤ —Å–ø–∏—Å–∫–µ, –∞ –ø–µ—Ä–≤–∞—è - –ø–æ—Å–ª–µ–¥–Ω–µ–π.
        // 3. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ revert, —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏.
        LinkedList<String> linked = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean work = true;
        while (work) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ");
            String text = scanner.nextLine();
            text = text.trim();
            switch (text){
                case "exit" :
                    work = false;
                    break;
                case "revert" :
                    linked.removeLast();
                    break;
                case "print" :
                    ListIterator listIterator = linked.listIterator(linked.size());
                    while (listIterator.hasPrevious()){
                        System.out.println(listIterator.previous());
                    }
                    break;
                default:
                    linked.add(text);
            }
        }

    }

    static void task3(){
        // üìî 1) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å—Ç—ç–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—ç–∫–∞.
        // 2) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏.
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.push(4);
        stack.add(5);
        while (!stack.isEmpty()){
            System.out.println(stack.pop());
        }

        System.out.println("");

        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        queue.offer(2);
        queue.offer(3);
        queue.offer(4);
        queue.offer(5);
        while (!queue.isEmpty()){
            System.out.println(queue.poll());
        }
    }

    static void stack(){
        MyStack myStack = new MyStack();
        myStack.push(1);
        myStack.push(2);
        myStack.push(3);
        myStack.push(6);
        myStack.push(8);
        myStack.tell();
        System.out.println(myStack.empty());
        System.out.println(myStack.size());
        System.out.println(myStack.pop());
        System.out.println(myStack.peek());
        myStack.tell();

        myStack.push(10);

        myStack.tell();

        myStack.push(20);

        myStack.tell();
        System.out.println(myStack.empty());
        System.out.println(myStack.size());
        System.out.println(myStack.pop());
                System.out.println(myStack.pop());
        System.out.println(myStack.peek());
        myStack.tell();

    }
}
