package seminar5;


import Passport;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.TreeMap;

public class Sem5 {
    public static void main(String[] args) {
        
        // task0();
        // System.out.println(task1("foo", "bar"));
        // System.out.println(task2("<{a}+{(d*3)}>"));
        System.out.println(task3("–ú–æ—Ä–æ–∑ –∏ —Å–æ–ª–Ω—Ü–µ –¥–µ–Ω—å —á—É–¥–µ—Å–Ω—ã–π –ï—â–µ —Ç—ã –¥—Ä–µ–º–ª–µ—à—å –¥—Ä—É–≥ –ø—Ä–µ–ª–µ—Å—Ç–Ω—ã–π –ü–æ—Ä–∞ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ –ø—Ä–æ—Å–Ω–∏—Å—å."));

        // TreeMap<Integer, String> db = new TreeMap<>();
        // db.putIfAbsent(1, "–æ–¥–∏–Ω"); System.out.println(db);
        // db.put(2, "–¥–≤–∞"); System.out.println(db);
        // db.put(3, "—Ç—Ä–∏"); System.out.println(db);
        // db.putIfAbsent(1, "–æ–ø—è—Ç—å –æ–¥–∏–Ω"); System.out.println(db);
        // db.put(1, "–æ–¥–∏–Ω –æ–¥–∏–Ω"); System.out.println(db);
        // db.put(31, "—Ç—Ä–∏ –æ–¥–∏–Ω"); System.out.println(db);
        // db.put(13, "–æ–¥–∏–Ω —Ç—Ä–∏"); System.out.println(db);

        // for (var item : db.entrySet()) {
        //     System.out.printf("[%d: %s]\n", item.getKey(), item.getValue());
        // }
        // System.out.println(db.keySet());
        // System.out.println(db.values());
        
    }

    static void task0(){
        // üìî –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ù–æ–º–µ—Ä–æ–≤ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –∏ –§–∞–º–∏–ª–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
        // 123456 –ò–≤–∞–Ω–æ–≤
        // 321456 –í–∞—Å–∏–ª—å–µ–≤
        // 234561 –ü–µ—Ç—Ä–æ–≤–∞
        // 234432 –ò–≤–∞–Ω–æ–≤
        // 654321 –ü–µ—Ç—Ä–æ–≤–∞
        // 345678 –ò–≤–∞–Ω–æ–≤
        // –í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å —Ñ–∞–º–∏–ª–∏–µ–π –ò–≤–∞–Ω–æ–≤.

        Passport passport = new Passport();
        passport.add("123456", "–ò–≤–∞–Ω–æ–≤");
        passport.add("1223456", "–í–∞—Å–∏–ª—å–µ–≤");
        passport.add("123126", "–ü–µ—Ç—Ä–æ–≤–∞");
        passport.add("654321", "–ò–≤–∞–Ω–æ–≤");
        
        System.out.println(passport.getByLastName("–ò–≤–∞–Ω–æ–≤"));
        System.out.println(passport.getByPassNum("123126"));
        System.out.println(passport.getAll());
    }

    static Boolean task1(String str1, String str2){
        // üìî –î–∞–Ω—ã 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç true, –µ—Å–ª–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã–º–∏ –∏ false, –µ—Å–ª–∏ –Ω–µ—Ç. –°—Ç—Ä–æ–∫–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã, –µ—Å–ª–∏ –æ–¥–Ω—É –±—É–∫–≤—É –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±—É–∫–≤—É –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª–æ–≤–µ, –ø—Ä–∏ —ç—Ç–æ–º

        // 1. –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±—É–∫–≤—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä, add - egg –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã)
        // 2. –±—É–∫–≤–∞ –º–æ–∂–µ—Ç –Ω–µ –º–µ–Ω—è—Ç—å—Å—è, –∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–∫–æ–π –∂–µ. (–ù–∞–ø—Ä–∏–º–µ—Ä, note - code)

        // –ü—Ä–∏–º–µ—Ä 1:
        // Input: s = "foo", t = "bar"
        // Output: false
        // –ü—Ä–∏–º–µ—Ä 2:
        // Input: s = "paper", t = "title"
        // Output: true

        if (str1.length() != str2.length()) return false;
        char[] c1 = str1.toCharArray();
        char[] c2 = str2.toCharArray();
        Map<Character,Character> map = new HashMap<>();

        for (int i = 0 ; i < c1.length; i++) {
            if(map.containsKey(c1[i])){
                if(c2[i] != map.get(c1[i])) return false;
            }else{
                map.put(c1[i],c2[i]);
            }
        }
        return true;
    }

    static Boolean task2(String str){
        // üìî –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.
        // –ü—Ä–∏–º–µ—Ä 1: a+(d*3) - –∏—Å—Ç–∏–Ω–∞
        // –ü—Ä–∏–º–µ—Ä 2: [a+(1*3) - –ª–æ–∂—å
        // –ü—Ä–∏–º–µ—Ä 3: [6+(3*3)] - –∏—Å—Ç–∏–Ω–∞
        // –ü—Ä–∏–º–µ—Ä 4: {a}[+]{(d*3)} - –∏—Å—Ç–∏–Ω–∞
        // –ü—Ä–∏–º–µ—Ä 5: <{a}+{(d*3)}> - –∏—Å—Ç–∏–Ω–∞
        // –ü—Ä–∏–º–µ—Ä 6: {a+]}{(d*3)} - –ª–æ–∂—å

        Stack<Character> stack = new Stack<>();
        char[] c = str.toCharArray();
        Map<Character,Character> map = new HashMap<>();
        map.put('(', ')');
        map.put('{', '}');
        map.put('[', ']');
        map.put('<', '>');
        for (int i = 0; i < c.length; i++){
            // if(c[i] == '(') stack.push(c[i]);
            // if(c[i] == ')'){
            //     if (stack.isEmpty() || stack.pop() != '(') return false;
            if(map.containsKey(c[i])) stack.push(c[i]);
            if(map.containsValue(c[i])){
                if(stack.isEmpty() || map.get(stack.pop()) != c[i]) return false;
            }            
        }
        if(!stack.isEmpty()) return false;
        return true;
    }

    static String task3(String str){
        // üìî –í–∑—è—Ç—å –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä,

        // –ú–æ—Ä–æ–∑ –∏ —Å–æ–ª–Ω—Ü–µ –¥–µ–Ω—å —á—É–¥–µ—Å–Ω—ã–π
        // –ï—â–µ —Ç—ã –¥—Ä–µ–º–ª–µ—à—å –¥—Ä—É–≥ –ø—Ä–µ–ª–µ—Å—Ç–Ω—ã–π
        // –ü–æ—Ä–∞ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ –ø—Ä–æ—Å–Ω–∏—Å—å.

        // –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–ª–∏–Ω–µ —Å –ø–æ–º–æ—â—å—é TreeMap. –°—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–æ–π –Ω–µ –¥–æ–ª–∂–Ω—ã ‚Äú–ø–æ—Ç–µ—Ä—è—Ç—å—Å—è‚Äù.
        str = str.replace("\n", " ");
        str = str.replace(".", " ");
        String[] words = str.split(" ");
        Map<Integer, List<String>> map = new TreeMap<>();

        for (String word: words){
            int len = word.length();
            if (map.containsKey(len)){
                List<String> list = map.get(len);
                list.add(word);
            }else{
                List<String> list = new ArrayList<>();
                list.add(word);
                map.put(len, list);              
            }
        }
        return map.toString();

    }
}
